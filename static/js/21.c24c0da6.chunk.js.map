{"version":3,"sources":["games/TicTacToe.js"],"names":["Square","value","onClick","className","calculateWinner","squares","possibleLines","i","length","a","b","c","TicTacToe","props","useState","Array","fill","setSquares","winner","userSymbol","computerSymbol","description","avatar","renderSquare","nextSquares","slice","setTimeout","generatedSquares","generatedSquare","setGeneratedSquare","document","querySelector","scrollIntoView","behavior","isBoardFull"],"mappings":"oKAGA,SAASA,EAAT,GAAqC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QACvB,OACE,4BAAQC,UAAU,SAASD,QAASA,GACjCD,GAmFP,SAASG,EAAgBC,GAYvB,IAXA,IAAMC,EAAgB,CACpB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGAC,EAAI,EAAGA,EAAID,EAAcE,OAAQD,IAAK,CAAC,IAAD,cAC3BD,EAAcC,GADa,GACtCE,EADsC,KACnCC,EADmC,KAChCC,EADgC,KAE7C,GAAIN,EAAQI,IAAMJ,EAAQI,KAAOJ,EAAQK,IAAML,EAAQI,KAAOJ,EAAQM,GACpE,OAAON,EAAQI,GAGnB,OAAO,KAYMG,UA5Gf,SAAmBC,GAAQ,IAAD,EACMC,mBAASC,MAAM,GAAGC,KAAK,OAD7B,mBACjBX,EADiB,KACRY,EADQ,KAElBC,EAASd,EAAgBC,GACzBc,EAAa,IACbC,EAAiB,IACjBC,EAAW,6GAAsGR,EAAMS,OAA5G,oHAcjB,SAASC,EAAahB,GACpB,OACE,kBAACP,EAAD,CACEC,MAAOI,EAAQE,GACfL,QAAS,WACP,GAAkB,MAAdG,EAAQE,IAAwB,MAAVW,EAA1B,CAGA,IAAMM,EAAcnB,EAAQoB,QAC5BD,EAAYjB,GAAKY,EACjBF,EAAWO,GAENpB,EAAgBoB,IACnBE,YAAW,WACT,IAAMC,EAAmBH,EAAYC,QAC/BG,EAmCpB,SAA4BvB,GAC1B,IAAK,IAAIE,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,IAClC,GAAkB,MAAdF,EAAQE,GACV,OAAOA,EAGX,OAAO,KAzC6BsB,CAAmBF,GACpB,MAAnBC,IACFD,EAAiBC,GAAmBR,EACpCH,EAAWU,MAEZ,SAOb,OACE,yBAAKxB,UAAU,QACb,yBAAKA,UAAU,aACb,2BAAIkB,IAEN,yBAAKlB,UAAU,cACZoB,EAAa,GACbA,EAAa,GACbA,EAAa,GACbA,EAAa,GACbA,EAAa,GACbA,EAAa,GACbA,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,yBAAKpB,UAAU,eACb,2BAvDAe,GACFY,SAASC,cAAc,gBAAgBC,eAAe,CAAEC,SAAU,WAChD,MAAXf,EAAiB,oBAAsB,4BAyFpD,SAAqBb,GACnB,IAAK,IAAIE,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,IAClC,GAAkB,MAAdF,EAAQE,GACV,OAAO,EAGX,OAAO,EA9FM2B,CAAY7B,IACrByB,SAASC,cAAc,eAAeC,eAAe,CAAEC,SAAU,WAC1D,4BAEA,Q","file":"static/js/21.c24c0da6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./TicTacToe.css\";\n\nfunction Square({ value, onClick }) {\n  return (\n    <button className='square' onClick={onClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction TicTacToe(props) {\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const winner = calculateWinner(squares);\n  const userSymbol = \"X\";\n  const computerSymbol = \"O\";\n  const description = `Um zu spielen, setze dein Kreuz in eines der KÃ¤stchen, indem du dort hinein klickst. Danach ist ${props.avatar} dran. Um zu gewinnen, musst du drei Kreuze in einer waagerechten, senkrechten oder diagonalen Reihe platzieren.`;\n\n  function getStatus() {\n    if (winner) {\n      document.querySelector('.game-result').scrollIntoView({ behavior: 'smooth' });\n      return winner === \"X\" ? \"Du hast gewonnen!\" : \"Es ist ja nur ein Spiel!\";\n    } else if (isBoardFull(squares)) {\n      document.querySelector('game-result').scrollIntoView({ behavior: 'smooth' });\n      return \"Ein solidarisches Remis!\";\n    } else {\n      return '';\n    }\n  }\n\n  function renderSquare(i) {\n    return (\n      <Square\n        value={squares[i]}\n        onClick={() => {\n          if (squares[i] != null || winner != null) {\n            return;\n          }\n          const nextSquares = squares.slice();\n          nextSquares[i] = userSymbol;\n          setSquares(nextSquares);\n\n          if (!calculateWinner(nextSquares)) {\n            setTimeout(() => {\n              const generatedSquares = nextSquares.slice();\n              const generatedSquare = setGeneratedSquare(generatedSquares);\n              if (generatedSquare != null) {\n                generatedSquares[generatedSquare] = computerSymbol;\n                setSquares(generatedSquares);\n              }\n            }, 300);\n          }\n        }}\n      />\n    );\n  }\n\n  return (\n    <div className='game'>\n      <div className='game-info'>\n        <p>{description}</p>\n      </div>\n      <div className='game-board'>\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </div>\n      <div className='game-result'>\n        <p>{getStatus()}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction setGeneratedSquare(squares) {\n  for (let i = 0; i < squares.length; i++) {\n    if (squares[i] == null) {\n      return i;\n    }\n  }\n  return null;\n}\n\nfunction calculateWinner(squares) {\n  const possibleLines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  // go over all possibly winning lines and check if they consist of only X's/only O's\n  for (let i = 0; i < possibleLines.length; i++) {\n    const [a, b, c] = possibleLines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nfunction isBoardFull(squares) {\n  for (let i = 0; i < squares.length; i++) {\n    if (squares[i] == null) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default TicTacToe;\n"],"sourceRoot":""}